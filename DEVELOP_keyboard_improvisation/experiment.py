import os

from markupsafe import Markup

from dominate import tags

import psynet.experiment
from psynet.asset import CachedAsset, LocalStorage
from psynet.consent import NoConsent
from psynet.modular_page import AudioPrompt, ImagePrompt, ModularPage, Prompt, RadioButtonControl
from psynet.page import InfoPage, SuccessfulEndPage
from psynet.timeline import Event, Module, PageMaker, Timeline
from psynet.trial.static import StaticNode, StaticTrial, StaticTrialMaker

from .python_scripts.audio_file import get_duration_wave_file
from .python_scripts.web_midi_constrol import WebMidiControl
from .python_scripts.audio_and_image_prompt import AudioAndImagePrompt


########################################################################################################################
# Stimuli
########################################################################################################################

INPUT_PATH_DIR = "static/melodies/"
NUMBER_REPETITIONS = 3

file_names = [
    "Melody_3.wav",
    "Melody_6.wav",
    "Melody_8.wav",
]

total_melodies = len(file_names)

prestart_assets = {
    "audio_test_sound": CachedAsset(input_path=INPUT_PATH_DIR + 'sol-note.mp3'),
}

nodes = [
    StaticNode(
        definition={
            "melody_file_name": file_name,
            "melody_index": index,
        },
        assets={
            "stimulus": CachedAsset(
                input_path=INPUT_PATH_DIR + file_name,
                extension=".wav",
            )
        },
    )
    for index, file_name in enumerate(file_names)
]

########################################################################################################################
# Before starting
########################################################################################################################

def requirements():
    html = tags.div()
    with html:
        tags.p(
            "For this experiment we need to you to be sitting in a quiet room with a good internet connection. "
            "You are required to use the 'Google Chrome' browser to complete this experiment."
        )
        tags.br()
        tags.p(
            "If you can, please wear headphones or earphones for the best experience."
        )

    return InfoPage(html, time_estimate=15)

# ======================================================================================================================
# Equipment test
# ======================================================================================================================
def equipment_test():
    return Module(
        "equipment_test",
        calibrate_volume(),
        verify_midi_keyboard(),
        select_sound_output(),
        assets=prestart_assets,
    )

def calibrate_volume():
    return PageMaker(
        lambda assets: ModularPage(
        "calibrate_volume",
        AudioPrompt(
            audio=assets["audio_test_sound"],
            text="Please adjust your computer volume to a comfortable level where you can hear the note clearly.",
            loop=True,
            text_align="center",
        ),
        time_estimate=10,
        ),
        time_estimate=10,
    )

def verify_midi_keyboard():
    return ModularPage(
        "verify_midi_keyboard",
        ImagePrompt(
            url="static/plug-usb.gif",
            text=
                "Make sure your MIDI keyboard is connected to your computer and then press any key on the " \
                "MIDI keyboard. If you do not hear any sound when pressing the keys of your MIDI keyboard, " \
                "press the \"Reinitialize MIDI keyboard connection button\". The \"Next\" button will be "
                "enabled once a signal is received from your MIDI keyboard.",
            width="400px",
            height="250px",
        ),
        WebMidiControl(
            is_sound_enabled=True,
            has_reinitialize_connection_button=True,
        ),
        time_estimate=30,
    )

def select_sound_output():
    return ModularPage(
        "audio_output",
        prompt="What are you using to play sound?",
        control=RadioButtonControl(
            choices=["Keyboard", "Application"],
            labels=[
                "Sound generated by my keyboard",
                "Sound generated by the application",
            ],
            show_free_text_option=False,
        ),
        time_estimate=7.5,
        save_answer="audio_output"
    )

# ======================================================================================================================
# Improvisation phase
# ======================================================================================================================

class MusicalImprovisationTrial(StaticTrial):

    time_estimate = 10

    def show_info_page_before_improvisation(self):
        return InfoPage(
            Prompt(
                text=Markup("""<h1> One more time! </h1>"""),
                text_align='center',
            ),
            time_estimate=3,
            show_next_button=False,
            events={
            "automaticallyContinue": Event(
                is_triggered_by="trialStart",
                delay=2,
                js="psynet.submitResponse();",
            ),
        }
    )

    def show_info_page_before_next_melody(self):
        return InfoPage(
            Prompt(
                text=Markup("""<h1> Time for the next melody! </h1>"""),
                text_align='center',
            ),
            time_estimate=3,
            show_next_button=False,
            events={
            "automaticallyContinue": Event(
                is_triggered_by="trialStart",
                delay=2,
                js="psynet.submitResponse();",
            ),
        }
    )

    def present_melody(self):
        return ModularPage(
            "listen_once",
            AudioAndImagePrompt(
                audio=self.assets["stimulus"],
                image_url='static/images/listen.bmp',
                text='Listen to the melody',
                width='600px',
                height='500px',
                margin_top= "100px",
                margin_bottom="100px",
                text_align="center",
            ),
            show_next_button=False,
            time_estimate=self.time_estimate,
            events={
                "automaticallyContinue": Event(
                    is_triggered_by="promptEnd",
                    delay=0,
                    js="psynet.submitResponse();",
                ),
            }
        )

    def improvise_melody(self, number_repetition):
        melody_duration = get_duration_wave_file(os.path.join(INPUT_PATH_DIR, self.definition["melody_file_name"]))
        def get_improvisation_events():
            return {
                "recordStart": Event(
                    is_triggered_by="promptStart",
                    delay=melody_duration - 0.25,
                    js="document.getElementById('prompt-text').innerHTML = 'Improvise now!'; ",
                ),
                "automaticallyContinue": Event(
                    is_triggered_by="recordStart",
                    delay=melody_duration + 2,
                    js="psynet.submitResponse();",
                ),
            }

        return ModularPage(
            f"improvisation_{number_repetition}",
            AudioAndImagePrompt(
                audio=self.assets["stimulus"],
                image_url='static/images/listen.bmp',
                image_url_2='static/images/play.bmp',
                text=f'Improvise the continuation of the melody {self.definition["melody_index"]}',
                width='600px',
                height='500px',
                margin_top= "100px",
                margin_bottom="100px",
                text_align="center",
            ),
            WebMidiControl(
                is_sound_enabled=True,
            ),
            show_next_button=False,
            events=get_improvisation_events(),
            time_estimate=self.time_estimate,
        )

    def show_trial(self, experiment, participant):
        sequence =[
            self.present_melody(),
            self.show_info_page_before_improvisation(),
            *[self.improvise_melody(number_repetition) for number_repetition in range(1, NUMBER_REPETITIONS + 1)]
        ]

        # Add a 'next melody' information page if it is not the last melody
        is_last_melody =  self.definition['melody_index'] < (total_melodies - 1)
        if is_last_melody:
            sequence.append(self.show_info_page_before_next_melody())

        return sequence

# ======================================================================================================================
# Experiment definition
# ======================================================================================================================
class Exp(psynet.experiment.Experiment):
    label = "Divergent Association Task"
    initial_recruitment_size = 1
    asset_storage = LocalStorage()

    timeline = Timeline(
        requirements(),
        NoConsent(),
        equipment_test(),
        StaticTrialMaker(
            id_="mdtt_improvisation",
            trial_class=MusicalImprovisationTrial,
            nodes=nodes,
            target_n_participants=0,
            recruit_mode="n_participants",
            expected_trials_per_participant=len(nodes),
            allow_repeated_nodes=False,
            balance_across_nodes=False,
        ),
        SuccessfulEndPage(),
    )



